# -*- coding: utf-8 -*-
"""Design credit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ojn17khXB_92NpzvkV1q9yMQMsdNbeOw
"""

import pandas as pd
import numpy as np

df =pd.read_excel("/content/drive/MyDrive/DC_DATA_baran.xlsx")
df

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  from matplotlib import pyplot as plt
  import seaborn as sns
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['From Date']
  ys = series['Ci(ppbv)']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('From Date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('From Date')
_ = plt.ylabel('Ci(ppbv)')

df = df.replace('#VALUE!', np.nan)
print(df.isnull().sum())
# df = df.dropna()
# df = df.reset_index(drop=True)
# print(df)
df['Ci(ppbv)'] = df['Ci(ppbv)'].interpolate()
#Linear interpolation estimates missing values by assuming a
#linear relationship between the available neighboring data points. It calculates the values for missing points as a weighted average of the nearest points on either side.
print(df.isnull().sum())
print(df)

df['From Date'] = pd.to_datetime(df['From Date'], format='%d/%m/%Y')
df['To Date'] = pd.to_datetime(df['To Date'], format='%d/%m/%Y')
df['From Time'] = pd.to_datetime(df['From Time'], format='%H:%M:%S')
df['To Time'] = pd.to_datetime(df['To Time'], format='%H:%M:%S')

"""Calculating M12(exposure metric or proxy metric)"""

start_time = pd.to_datetime('08:00', format='%H:%M').time()
end_time = pd.to_datetime('20:00', format='%H:%M').time()
#8 se 8 time isliye liya kyu ki jo emprical formula bana hai m12 ke liye wo iss duration le according bana hai to data usi ke bech lena hai

filtered_df = df[(df['From Time'].dt.time >= start_time) & (df['To Time'].dt.time <= end_time) & (df['To Time'].dt.time >= start_time)]
# print(filtered_df.head(20))
column_name = 'Ci(ppbv)'
filtered_df[column_name] = pd.to_numeric(filtered_df[column_name], errors='coerce')
daily_totals = filtered_df.groupby(filtered_df['From Date'].dt.date)[column_name].sum()
# monthly_sum = filtered_df.groupby(filtered_df['From Date'].dt.to_period('M')).agg({column_name: 'sum', 'From Date': 'nunique'})
# daily_count = filtered_df.groupby(filtered_df['From Date'].dt.to_period('M')).size()
daily_totals=daily_totals/12
daily_totals.index = pd.to_datetime(daily_totals.index)
monthly_totals = daily_totals.groupby(pd.Grouper(freq='M')).sum()
monthly_totals /= monthly_totals.index.days_in_month

# Print the monthly totals
# print(monthly_totals)

start_month = 8  # Starting month (August)
end_month = 10  # Ending month (October)
selected_months = monthly_totals[(monthly_totals.index.month >= start_month) & (monthly_totals.index.month <= end_month)]
M12_YEARLY = selected_months.groupby(selected_months.index.year).sum()
M12_YEARLY=M12_YEARLY/3

print(M12_YEARLY)

value_2019 = M12_YEARLY[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'M12(in ppbv)'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')

"""Calculating AOT40(Exposure metric or proxy metric)"""

start_time = pd.to_datetime('06:00', format='%H:%M').time()# 6 se 6 isliye liya kyu ki daytime hrs wahi the
end_time = pd.to_datetime('18:00', format='%H:%M').time()
filtered_df1 = df[(df['From Time'].dt.time >= start_time) & (df['To Time'].dt.time <= end_time) & (df['To Time'].dt.time >= start_time)]
filtered_df1['Ci(ppbv)'] = pd.to_numeric(df['Ci(ppbv)'], errors='coerce')
condition = (df['Ci(ppbv)'] >= 40)
filtered_df_ = filtered_df1[condition]
column_name_ = 'Ci(ppbv)'
daily_sum = filtered_df_.groupby(filtered_df_['From Date'].dt.date)[column_name_].sum()
daily_count = filtered_df_.groupby(filtered_df_['From Date'].dt.date).size()
# print(daily_sum)
# print(daily_count)
AOT40=daily_sum-(40*daily_count)
# print(AOT40)

AOT40.index = pd.to_datetime(AOT40.index)
monthly_sum = AOT40.groupby(AOT40.index.to_period('M')).sum()
# print(monthly_sum)
start_month = 8  # Starting month (August)
end_month = 10  # Ending month (October)
selected_months_ = monthly_sum[(monthly_sum.index.month >= start_month) & (monthly_sum.index.month <= end_month)]
AOT40_YEARLY = selected_months_.groupby(selected_months_.index.year).sum()

print(AOT40_YEARLY)

value_2019 = AOT40_YEARLY[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'AOT_40'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

"""Avg O3"""

Total_sum=df.groupby(df['From Date'].dt.date)['Ci(ppbv)'].sum()
Avg_O3=Total_sum/24
print(Avg_O3)

import matplotlib.pyplot as plt
# plt.scatter(Avg_O3, AOT40)
# plt.xlabel('Avg_O3')
# plt.ylabel('AOT40')
# plt.title('Scatter Plot:Avg O3 vs AOT40')
# plt.show()
plt.plot(Avg_O3, label='Ozone')
plt.xlabel('Duration')
plt.ylabel('Avg_O3')
plt.title('Avg_Ozone Values')
plt.legend()
plt.show()
print("\n")
plt.plot(AOT40_YEARLY, label='Aot40_YEARLY')
plt.xlabel('Duration')
plt.ylabel('AOt40_YEARLY')
plt.title('AOT40_YEARLY')
plt.legend()
plt.show()

"""For Soybean (RY)"""

#For AOT40
RY_aot40=1-(0.0000113*AOT40_YEARLY)
print(RY_aot40)

value_2019 = RY_aot40[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'RY_AOT40'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

#For M12
RY_m12=((np.exp(-(M12_YEARLY/107)**1.58)/np.exp(-(20/107)**1.58)))*0.9317744903441119
print(RY_m12)

value_2019 = RY_m12[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'RY_M12'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

"""FOR 2019 SOYABEAN CROP(From M12)"""

CPi=115752  #in tonnes
RY_m12_2019 = RY_m12
RYLi=1-RY_m12_2019
CPLi=(RYLi/RY_m12_2019)*CPi
CPLi
#Ozone KE KARAN LOSS 2020 ME KAM ISLIYE HAI KYUKI OZONE KA DESTRUCTION NHI HO PAYA KYU KI PARTICLE NATURE ME KAM THE  NO OZONE KO DESTROY BHI KARNA HAI TO RAAT ME DESTROY NHI KAR PAYA TO ISLIYE 2020 ME BHAD GAYA

value_2019 = RYLi[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'RYLi_M12'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

value_2019 = CPLi[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'CPLi_M12'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

"""FOR 2019 SOYABEAN CROP(From AOT40)"""

RY_aot40_2019 = RY_aot40
RYLi_=1-RY_aot40_2019
CPLi_=(RYLi_/RY_aot40_2019)*CPi
CPLi_

value_2019 = RYLi_[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'RYLi_AOT40'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

value_2019 = CPLi_[2019]

existing_excel_file_path = '/content/Report.xls'
existing_df = pd.read_excel(existing_excel_file_path)

# Add a new column with the M12_YEARLY values for the specific year
new_column_name = 'CPLi_AOT40'
# existing_df[new_column_name] = selected_year_values.values

identifier_column = 'District'

matching_row_condition = existing_df[identifier_column] =='BARAN'  # Replace 'some_identifier' with the actual identifier

if matching_row_condition.any():
    # Update the specific row with the M12_YEARLY value for the given year
    existing_df.loc[matching_row_condition, new_column_name] = value_2019

    # Save the updated DataFrame back to the existing Excel file
    existing_df.to_excel(existing_excel_file_path, index=False)

    print(f'{new_column_name} added to {existing_excel_file_path}')
else:
    print('No matching rows found.')
print(existing_df)

display(existing_df)

df_ = pd.DataFrame(existing_df)

# Filter data for CPLi_M12 column
cpli_m12_data = df_[['District', 'CPLi_M12']]
colors = ['red', 'green', 'blue']
# Plot bar graph
plt.figure(figsize=(8, 6))
bars=plt.bar(cpli_m12_data['District'], cpli_m12_data['CPLi_M12'], color=colors)
plt.xlabel('District')
plt.ylabel('CPLi_M12(in tonnes)')
plt.title('CPLi_M12 for Each District')
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 2), ha='center', va='bottom')
plt.show()

cpli_aot_40_data = df_[['District', 'CPLi_AOT40']]

# Plot bar graph
plt.figure(figsize=(8, 6))
bars=plt.bar(cpli_aot_40_data['District'], cpli_aot_40_data['CPLi_AOT40'], color=colors)
plt.xlabel('District')
plt.ylabel('CPLi_AOT40(in tonnes)')
plt.title('CPLi_AOT40 for Each District')
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 2), ha='center', va='bottom')
plt.show()

